1)Sorting: There is mainly n insertions and pop_mins as these are the main operations,
          so each element is inserted and then popped. There is a lot of tidying as well

  String search: There are many inserts here as well but more than Sorting as we need to
                  concatenate every element to others so results in more contains checking
                  and some pop_min and tidy operations as well

2)  Linked List:
      a) Insertion - O(1)
      b) Contains (Search) - O(n)
      c) pop_min (Deletion) - O(n)
      d) Empty - O(1)
      e) tidy - O(n)

    Sorted Linked list:
      a) Insertion - O(n)
      b) Contains(search) - O(n)
      c) pop_min (Deletion) - O(1)
      d) Empty - O(1)
      e) tidy - O(n)

    AVL Tree:
      a) Insertion - O(logn)
      b) Contains (Search) - O(logn)
      c) pop_min (Deletion) - O(logn)
      d) Empty - O(1)
      e) tidy - O(logn)

    Binary Heap:
      a) Insertion - O(logn)
      b) Contains (Search) - O(n)
      c) pop_min (Deletion)- O(logn)
      d) Empty - O(1)
      e) tidy - O(n)

    Skip List:
      a) Insertion - O(n + h)
      b) Contains (Search) - O(n + h)
      c) pop_min (Deletion) - O(h)
      d) Empty - O(1)
      e) tidy - O(n)

3) AVL tree and Binary heap is the best for Sorting as their complexity
is the same which is O(logn) for insertion and pop_min and others are much bigger than that.
AVL tree is the best for String search as its complexity is the fastest which is O(logn)
for searching and inserting.

4) Sorting: BinaryHeap 0m0.369s
            skiplist 0m0.528s
            avltree  0m0.589s
            llist1 22m8.031s
            llist2 19m10.335s

BinaryHeap performed the best.

  Concat:   BinaryHeap 0m0.989s
            skiplist 0m0.533s
            avltree 0m0.579s
            llist1 20m19s
            llist2 43m50.145s

skiplist performed the best as most of the time the average case is applied
which is better than other implementations.

5) When we sort using string length, this will reduce sorting as it will result in equal priorities.
The unsorted linked list will be the only one which will not change. There is no need to sift up so
binaryHeap will perform much better. In the sorted linked list the search complexity will decrease
but the pop_min will not be affected.
